// Code generated by graphql-codegen. DO NOT EDIT.
import * as Types from "../../__generated__/graphqlTypes";

import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";
import gql from "graphql-tag";
export type PostListItemFragment = {
  readonly __typename?: "Post";
  readonly title: string;
  readonly author: {
    readonly __typename?: "User";
    readonly id: string;
    readonly avatarUrl?: Types.Maybe<string>;
    readonly username: string;
  };
};

export type ListPostsQueryVariables = Types.Exact<{
  userId: Types.Scalars["String"];
}>;

export type ListPostsQuery = {
  readonly __typename?: "Query";
  readonly postsByUserId: ReadonlyArray<{
    readonly __typename?: "Post";
    readonly id: string;
    readonly title: string;
    readonly author: {
      readonly __typename?: "User";
      readonly id: string;
      readonly avatarUrl?: Types.Maybe<string>;
      readonly username: string;
    };
  }>;
};

export const PostListItemFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PostListItem" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Post" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "title" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "author" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "id" } },
                { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                { kind: "Field", name: { kind: "Name", value: "username" } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PostListItemFragment, unknown>;
export const ListPostsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "ListPosts" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "postsByUserId" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "userId" },
                value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "id" } },
                { kind: "FragmentSpread", name: { kind: "Name", value: "PostListItem" } },
              ],
            },
          },
        ],
      },
    },
    ...PostListItemFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ListPostsQuery, ListPostsQueryVariables>;
export const PostListItem = gql`
  fragment PostListItem on Post {
    title
    author {
      id
      avatarUrl
      username
    }
  }
`;
export const ListPosts = gql`
  query ListPosts($userId: String!) {
    postsByUserId(userId: $userId) {
      id
      ...PostListItem
    }
  }
  ${PostListItem}
`;
