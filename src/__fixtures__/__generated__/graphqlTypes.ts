// Code generated by graphql-codegen. DO NOT EDIT.
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type AttachmentFile = Image | Video;

export type Comment = {
  readonly __typename?: "Comment";
  readonly author: User;
  readonly body: Scalars["String"];
  readonly id: Scalars["String"];
};

export type Image = {
  readonly __typename?: "Image";
  readonly id: Scalars["String"];
  readonly imageUrl: Scalars["String"];
};

export type Post = {
  readonly __typename?: "Post";
  readonly attachmentFiles: ReadonlyArray<AttachmentFile>;
  readonly author: User;
  readonly body: Scalars["String"];
  readonly comments: ReadonlyArray<Comment>;
  readonly id: Scalars["String"];
  readonly title: Scalars["String"];
};

export type Query = {
  readonly __typename?: "Query";
  readonly postById: Post;
  readonly postsByUserId: ReadonlyArray<Post>;
  readonly userById: User;
};

export type QueryPostByIdArgs = {
  postId: Scalars["String"];
};

export type QueryPostsByUserIdArgs = {
  userId: Scalars["String"];
};

export type QueryUserByIdArgs = {
  userId: Scalars["String"];
};

export type User = {
  readonly __typename?: "User";
  readonly avatarUrl?: Maybe<Scalars["String"]>;
  readonly email: Scalars["String"];
  readonly id: Scalars["String"];
  readonly username: Scalars["String"];
};

export type Video = {
  readonly __typename?: "Video";
  readonly id: Scalars["String"];
  readonly videoUrl: Scalars["String"];
};
